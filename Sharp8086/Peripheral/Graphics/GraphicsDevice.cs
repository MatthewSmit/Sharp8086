#region License
// // The MIT License (MIT)
// // 
// // Copyright (c) 2016 Digital Singularity
// // 
// // Permission is hereby granted, free of charge, to any person obtaining a copy
// // of this software and associated documentation files (the "Software"), to deal
// // in the Software without restriction, including without limitation the rights
// // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// // copies of the Software, and to permit persons to whom the Software is
// // furnished to do so, subject to the following conditions:
// // 
// // The above copyright notice and this permission notice shall be included in all
// // copies or substantial portions of the Software.
// // 
// // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// // SOFTWARE.
#endregion

using System;
using System.Collections.Generic;
using SDL2;
using Sharp8086.Core;
using Sharp8086.CPU;

namespace Sharp8086.Peripheral.Graphics
{
    public sealed class GraphicsDevice : IDisposable, IMemoryMappedDevice
    {
        private enum GraphicsMode
        {
            Text
        }

        private const int MEMORY_BASE = 0xB8000;
        private const int MEMORY_SIZE = 0x8000;

        private static readonly byte[] fontData =
        {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
            0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
            0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
            0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
            0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
            0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
            0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
            0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
            0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
            0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
            0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
            0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
            0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
            0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
            0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
            0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
            0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
            0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
            0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
            0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
            0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
            0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
            0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
            0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
            0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
            0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
            0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
            0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
            0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
            0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
            0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
            0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
            0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
            0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
            0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
            0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
            0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
            0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
            0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
            0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
            0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
            0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
            0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
            0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
            0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
            0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
            0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
            0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
            0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
            0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
            0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
            0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
            0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
            0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
            0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
            0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
            0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
            0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
            0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
            0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
            0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
            0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
            0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
            0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
            0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
            0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
            0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
            0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
            0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
            0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
            0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
            0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
            0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
            0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
            0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
            0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
            0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
            0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
            0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
            0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
            0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
            0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
            0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
            0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
            0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
            0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
            0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
            0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
            0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
            0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
            0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
            0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
            0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
            0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
            0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
            0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
            0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
            0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
            0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
            0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
            0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
            0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
            0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
            0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
            0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
            0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
            0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
            0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
            0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
            0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
            0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
            0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
            0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
            0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
            0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00
        };
        private static readonly uint[] colours =
        {
            0x000000FF,
            0x0000AAFF,
            0x00aa00FF,
            0x00aaaaFF,
            0xAA0000FF,
            0xAA00AAFF,
            0xAA5500FF,
            0xAAAAAAFF,
            0x555555FF,
            0x5555FFFF,
            0x55FF55FF,
            0x55FFFFFF,
            0xFF5555FF,
            0xFF55FFFF,
            0xFFFF55FF,
            0xFFFFFFFF
        };

        private readonly IntPtr window;
        private readonly IntPtr renderer;
        private readonly IntPtr texture;

        private readonly byte[] memory = new byte[MEMORY_SIZE];
        private bool dirty = true;

        private GraphicsMode mode = GraphicsMode.Text;
        private int width = 40;
        private int height = 25;
        private int charWidth = 8;
        private int charHeight = 8;

        public GraphicsDevice(IntPtr window, IntPtr renderer)
        {
            this.window = window;
            this.renderer = renderer;
            texture = SDL.SDL_CreateTexture(renderer, SDL.SDL_PIXELFORMAT_RGBX8888, SDL.SDL_TextureAccess.SDL_TEXTUREACCESS_STREAMING, width * charWidth, height * charHeight);
            if (texture == IntPtr.Zero)
                throw new InvalidOperationException();

            for (var y = 0; y < height; y++)
                for (var x = 0; x < width; x++)
                    memory[(y * width + x) * 2] = 0x0F;

            ChangeResolution();
        }

        public void Dispose() => SDL.SDL_DestroyTexture(texture);
        public void Draw()
        {
            if (dirty)
            {
                switch (mode)
                {
                    case GraphicsMode.Text:
                        DrawText();
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
                dirty = false;
            }

            if (SDL.SDL_RenderClear(renderer) != 0)
                throw new InvalidOperationException();
            if (SDL.SDL_RenderCopy(renderer, texture, IntPtr.Zero, IntPtr.Zero) != 0)
                throw new InvalidOperationException();
        }
        private unsafe void DrawText()
        {
            int pitch;
            IntPtr pixels;
            if (SDL.SDL_LockTexture(texture, IntPtr.Zero, out pixels, out pitch) != 0)
                throw new InvalidOperationException();

            var pixelPtr = (uint*)pixels;
            var stride = pitch / 4;
            for (var y = 0; y < height; y++)
            {
                for (var x = 0; x < width; x++)
                {
                    var code = memory[(y * width + x) * 2];
                    var chr = memory[(y * width + x) * 2 + 1];

                    var foreground = colours[code & 0x0F];
                    var background = colours[(code >> 4) & 0x0F];

                    var ptr = pixelPtr + y * charHeight * stride + x * charWidth;

                    for (var chrY = 0; chrY < charHeight; chrY++)
                    {
                        var yPtr = ptr + chrY * stride;
                        var fontChr = fontData[chr * 8 + chrY];
                        for (var chrX = 0; chrX < charWidth; chrX++)
                            yPtr[chrX] = ((fontChr >> (8 - chrX)) & 1) == 1 ? foreground : background;
                    }
                }
            }

            SDL.SDL_UnlockTexture(texture);
        }

        public byte ReadU8(uint address) => memory[address - MEMORY_BASE];
        public void WriteU8(uint address, byte value)
        {
            dirty = true;
            memory[address - MEMORY_BASE] = value;
        }

        private void ChangeResolution()
        {
            switch (mode)
            {
                case GraphicsMode.Text:
                    SDL.SDL_SetWindowSize(window, width * charWidth, height * charHeight);
                    SDL.SDL_SetWindowPosition(window, SDL.SDL_WINDOWPOS_CENTERED, SDL.SDL_WINDOWPOS_CENTERED);
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

        public IEnumerable<Tuple<uint, uint>> MappedMemory => new[]
        {
            new Tuple<uint, uint>(MEMORY_BASE >> Cpu8086.PAGE_SHIFT, MEMORY_SIZE >> Cpu8086.PAGE_SHIFT)
        };
    }
}